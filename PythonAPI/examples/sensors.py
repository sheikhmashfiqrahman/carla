

from ast import Lambda
from concurrent.futures import process
import glob
import os
import sys
import random
import time
from types import LambdaType
import numpy as np
import cv2
import navigation
try:
    sys.path.append(glob.glob('../carla/dist/carla-*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla


def main(): 
    actor_list=[]
    try:
        #create connection to the world 
     
        client = carla.Client('localhost',2000)
        client.set_timeout(10)
        world = client.get_world()
        world=client.load_world('Town01') #load different maps in the world

        # spawn an actor/ vehicle
        bp=world.get_blueprint_library()
        car_bp=bp.filter("cybertruck")[0]
        transform = carla.Transform(carla.Location(x=230, y=195, z=40),carla.Rotation(yaw=180))
        car =world.spawn_actor(car_bp,transform)
        car.apply_control(carla.VehicleControl(throttle=1.0,steer=0.0))
        actor_list.append(car)

        # Modify the attributes of the blueprint to set image resolution and field of view.
        cam_bp= bp.find('sensor.camera.rgb')
        cam_bp.set_attribute('image_size_x','800')
        cam_bp.set_attribute('image_size_y','600')
        cam_bp.set_attribute('fov','90')

        # Set the time in seconds between sensor captures
        cam_bp.set_attribute('sensor_tick','1.0')

        transform = carla.Transform(carla.Location(x=0.8, z=1.7))
        sensor = world.spawn_actor(cam_bp, transform, attach_to=car)

        actor_list.append(sensor)
        # will be called each time a new image is generated by the camera.
        sensor.listen(lambda image: image.save_to_disk('output/%d064.png'%image.frame))

        
       

        

        time.sleep(15)

    finally:
        for actor in actor_list:
            actor.destroy()
        print("All cleaned up")



if __name__=='__main__':
    main()




